unit TestUnit2;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, System.SysUtils, Vcl.Graphics, Vcl.StdCtrls, Winapi.Windows,
  System.Variants, Vcl.Dialogs, Unit2, Vcl.Controls, Vcl.Forms, Winapi.Messages,
  System.Classes;

type
  // Test methods for class TForm2

  TestTForm2 = class(TTestCase)
  strict private
    FForm2: TForm2;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestisPrimo;
    procedure TestisMultiplo;
    procedure Testmedia;
    procedure TestreverterString;
  end;

implementation

procedure TestTForm2.SetUp;
begin
  FForm2 := TForm2.Create(nil);
end;

procedure TestTForm2.TearDown;
begin
  FForm2.Free;
  FForm2 := nil;
end;

procedure TestTForm2.TestisPrimo;
var
  ReturnValue: Boolean;
  valor: Integer;
begin
  // TODO: Setup method call parameters
  valor := 1;
  ReturnValue := FForm2.isPrimo(valor);
  // TODO: Validate method results

  CheckEquals(false,ReturnValue);
end;

procedure TestTForm2.Testmedia;
var
  ReturnValue: double;
  a,b,c:double;
begin
  a := 2;
  b := 2;
  c := 2;
  ReturnValue := FForm2.media(a,b,c);

  CheckEquals(2,ReturnValue);
end;

procedure TestTForm2.TestreverterString;
var
  ReturnValue: string;
  s:string;
begin
  s := 'ovo';
  ReturnValue := FForm2.reverterString(s);

  CheckEquals('ovo',ReturnValue);
end;

procedure TestTForm2.TestisMultiplo;
var
  ReturnValue: Boolean;
  y: Integer;
  x: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FForm2.isMultiplo(x, y);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTForm2.Suite);
end.

